<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DAO/Service/Controller三层架构</title>
    <link href="/2023/03/05/DAO-Service-Controller%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    <url>/2023/03/05/DAO-Service-Controller%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Controller层"><a href="#1-Controller层" class="headerlink" title="1.Controller层"></a>1.Controller层</h1><p><strong>负责在页面和程序之间传输数据的，做页面的跳转。用户在页面中填写完表单数据，点击提交按钮，页面的表单数据由Controller传入Service层。</strong></p><p>Controller层负责具体的业务模块流程的控制，在此层要调用service层的接口来控制业务流程，控制的配置也同样是在Spring的配置文件里进行，针对具体的业务流程，会有不同的控制器。设计过程可以将流程进行抽象归纳，设计出可以重复利用的子单元流程模块。这样不仅使程序结构变得清晰，也能减少代码量。</p><h1 id="2-Service层"><a href="#2-Service层" class="headerlink" title="2.Service层"></a>2.Service层</h1><p>负责业务模块的应用逻辑设计。<strong>Controller只负责管理，而Service负责实施</strong>。同样是首先设计接口，再设计其实现类，然后在Spring的配置文件中配置其实现的关联。我们就可以在应用中调用service接口来进行业务处理。service层的业务实，具体要调用已经定义的dao层接口，封装service层业务逻辑有利于通用的业务逻辑的独立性和重复利用性。</p><h1 id="3-DAO层"><a href="#3-DAO层" class="headerlink" title="3.DAO层"></a>3.DAO层</h1><p>负责对数据向数据库增删改查的操作。</p><p>持久层（DAO）<br>采用DAO模式，建立实体类和数据库表映射（ORM映射）。也就是哪个类对应哪个表，哪个属性对应哪个列。持久层的目的就是，完成对象数据和关系数据的转换。</p><p>dao层主要做数据持久层的工作，封装了负责与数据库进行联系的一些任务，dao层的设计首先是设计dao层的接口，然后在Spring的配置文件中定义该接口的实现类，然后就可以调用该接口来进行数据业务的处理，而不用关心此接口的具体实现类是哪个类，结构清晰，DAO层的数据源，以及有关的数据库连接参数都在Spring配置文件中进行配置。</p><p><strong>Service层是建立在DAO层之上的，建立了DAO层后才可以建立Service层，然后建立Controller层。因而Service位于中间。所以既调用DAO层的接口，又要提供接口给Controller层的类来进行调用。每个模型都有一个Service接口，每个接口分别封装各自的业务处理方法。</strong></p><h1 id="4-三大框架Spring，SpringMVC和MyBatis"><a href="#4-三大框架Spring，SpringMVC和MyBatis" class="headerlink" title="4.三大框架Spring，SpringMVC和MyBatis"></a>4.三大框架Spring，SpringMVC和MyBatis</h1><p>在SpringMVC + Spring + Mybatis的系统中，</p><p>对象调用的顺序：<strong>JSP—Controller—Service—DAO—Mybatis</strong></p><p>数据的流向是：<strong>用户输入数据，Controller接收数据，对数据进行封装，再调用业务层，进行各种业务处理，而业务层收到这个数据之后，会调用DAO，进行持久化操作。</strong></p><p>Spring对应Service，是一个轻量级的控制反转(IoC)和面向切面(AOP)的框架。控制反转：由容器控制程序之间的依赖关系，而非传统实现中，由程序代码直接操控。控制权由应用代码转移到了外部容器中，控制权的转移，就是所谓反转。依赖注入，即组件之间的依赖关系由容器在运行期决定，即由容器动态地将某种依赖关系注入到组件之中，起到了解耦的作用。省去了在类里面new对象的过程，把这个调用与被调用的关系直接展示到了配置文件里。</p><p>SpringMVC对应Controller，在SSM框架中起控制的作用，其核心是Controller，主要对逻辑关系的处理进行控制。</p><p>Mybitis对应DAO，是持久层，是一种新的对象、关系的映射工具，根据数据库的表，反向生成实体类，提供了从Java类到数据表的映射，也提供了数据查询和恢复等机制，减少了数据访问的复杂度。把对数据库的直接操作，转换为对对象的操作。</p><p><img src="/../../_resources/dec02d1bf1af31e110e9d20ac2d45e64.png" alt="dec02d1bf1af31e110e9d20ac2d45e64.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git学习记录</title>
    <link href="/2023/03/04/Git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/03/04/Git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h1><p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。<br>即：以不同的开发方向进行开发，但主要的开发方向仍然可以保留</p><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ol><li>创建分支：<br><code>git branch (branchname)</code></li><li>切换分支：<br><code>git checkout (branchname)</code></li><li>合并分支：<br><code>git merge</code></li><li>删除分区：<br><code>git branch -d (branchname)</code></li><li>查看本地仓库与远程分支的区别</li><li>git fetch origin –prune 更新本地分支信息</li></ol><h1 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h1><ol><li>查看历史提交记录<br><code>git log</code></li><li>以列表形式查看指定文件的历史修改记录。<br><code>git blame &lt;file&gt;</code></li></ol><h1 id="git-标签"><a href="#git-标签" class="headerlink" title="git 标签"></a>git 标签</h1><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。<br><code>git tag -a v1.0 </code><br>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。</p><h1 id="Git-取消文件跟踪"><a href="#Git-取消文件跟踪" class="headerlink" title="Git 取消文件跟踪"></a>Git 取消文件跟踪</h1><ol><li><code>git rm -r -n --cached 文件或目录</code>:  列出你需要取消跟踪的文件，可以查看列表，检查下是否有误操作导致一些不应该被取消的文件取消了，是为了再次确认的。-r 表示递归，-n 表示先不删除，只是列出文件。</li><li><code>git rm -r --cached 文件</code>，取消缓存不想要跟踪的文件</li><li>修改根目录.gitignore 文件，添加你希望忽略的文件&#x2F;目录。</li><li>commit and push</li></ol><h1 id="Git-撤销commit"><a href="#Git-撤销commit" class="headerlink" title="Git 撤销commit"></a>Git 撤销commit</h1><h2 id="如果只是想修改注释，可以这样操作"><a href="#如果只是想修改注释，可以这样操作" class="headerlink" title="如果只是想修改注释，可以这样操作"></a>如果只是想修改注释，可以这样操作</h2><p><code>git commit --amend</code><br>这个时候进入vim编辑，直接修改即可，修改完注释，退出vim编辑<br>:wq保存已编辑的注释，重新git push即可</p><h2 id="要撤回commit"><a href="#要撤回commit" class="headerlink" title="要撤回commit"></a>要撤回commit</h2><p><code>git reset --soft HEAD^</code><br>这样就能成功的撤回你刚刚的commit操作。</p><p>HEAD^的意思是上一个版本，也可以写成HEAD<del>1<br>如果你进行了2次commit，想都撤回，可以使用HEAD</del>2<br><strong>注意，这个命令仅仅是撤回commit操作，写的代码仍然保留</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建日志-hexo</title>
    <link href="/2022/09/01/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97-hexo/"/>
    <url>/2022/09/01/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97-hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h1><ol><li>下载Node.js以及安装hexo引擎</li><li>初始化Hexo博客文件目录</li><li>配置git、准备远程推送</li><li>创建Github仓库</li><li>配置config文件</li><li>更新并推送博客内容</li></ol><h2 id="1-下载Node-js以及安装hexo引擎"><a href="#1-下载Node-js以及安装hexo引擎" class="headerlink" title="1. 下载Node.js以及安装hexo引擎"></a>1. 下载Node.js以及安装hexo引擎</h2><ul><li>下载NodeJS,尽量下载版本大于15的，否则后期很多主题不能使用。<blockquote><p>链接：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p></blockquote></li><li>打开cmd使用npm安装hexo <code>npm install hexo-cli -g</code></li></ul><h2 id="2-初始化Hexo博客文件目录"><a href="#2-初始化Hexo博客文件目录" class="headerlink" title="2. 初始化Hexo博客文件目录"></a>2. 初始化Hexo博客文件目录</h2><ul><li>初始化博客目录：找一个空的文件夹 <code>hexo init blog</code> 会生成一个blog目录，包含hexo博客的配置文件</li><li>进入blog目录，在cmd下输入<code>hexo g</code>就可以生成一个最初始的hexo博客</li><li>开启hexo博客服务：在cmd下输入<code>hexo s</code>并会默认在 <a href="localhost:4000">本地4000端口</a> 生成博客网站</li></ul><h2 id="3-配置git、准备远程推送"><a href="#3-配置git、准备远程推送" class="headerlink" title="3. 配置git、准备远程推送"></a>3. 配置git、准备远程推送</h2><ul><li><p>接下来准备将博客同步到Github上，需要保证本机电脑上安装了<strong>git</strong>，如若没有，跳转到<a href="https://git-scm.com/download/win">这里</a>进行下载安装</p></li><li><p>确保配置好了git的全局信息：包括邮箱、用户名</p><blockquote><p>配置命令如下</br><br>git config –global user.name “用户名” </br><br>git config –global user.name “邮箱”</p></blockquote></li><li><p>确保配置好了与Github的SSH Key，教程跳转至<a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh">此</a></p></li><li><p>安装hexo与git的连接插件<code>npm install hexo-deployer-git --save</code></p></li></ul><h2 id="4-创建Github仓库"><a href="#4-创建Github仓库" class="headerlink" title="4. 创建Github仓库"></a>4. 创建Github仓库</h2><ul><li>在github中New Repository</li><li>取名严格按照<code>name.github.io</code>其中name为你的Github名</li></ul><h2 id="5-配置config文件"><a href="#5-配置config文件" class="headerlink" title="5. 配置config文件"></a>5. 配置config文件</h2><ul><li>回到blog目录下，修改_config.yml文件：找到deploy关键字，并在type后加上 ‘git’ 效果为<code>type: git</code></li><li>换行添加<code>repo: &lt;刚刚创建的github仓库HTTP链接&gt;</code></li><li>保存退出</li></ul><h2 id="6-更新并推送博客内容"><a href="#6-更新并推送博客内容" class="headerlink" title="6. 更新并推送博客内容"></a>6. 更新并推送博客内容</h2><ul><li>在blog目录下打开cmd，输入<code>hexo g</code>生成新的文件</li><li>再输入<code>hexo d</code> 部署到github</li><li>中间可能要求输入用户名、邮箱，<strong>输入github的用户名与邮箱</strong>即可</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
